#!/usr/bin/env python
#
# Copyright (c) 2013-2014 Marin Atanasov Nikolov <dnaeon@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer
#    in this position and unchanged.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""
vpoller-client is the vPoller Client application.

It is used for sending client requests to vPoller Proxy/Workers for
discovering and polling of vSphere Object properties.

"""

import sys
import json
import logging
import importlib

from vpoller.client import VPollerClient
from docopt import docopt

def vpoller_helpers(helper, msg, data):
    """
    vPoller Helpers

    Dynamically loads a vPoller helper for post-processing
    any result messages. Useful when you need to return a
    result in other formats to be used by other tools/systems.

    An example of such a helper is the Zabbix helper, which
    takes care of returning result in Zabbix-friendly format.

    Args:
        helper  (str): The helper module name
        msg    (dict): The original request message
        data    (str): The result message from the request

    """
    try:
        helper_module = importlib.import_module(helper)
    except ImportError as e:
        return 'Cannot import helper module: %s' % e

    agent = helper_module.HelperAgent(msg, data)
    result = agent.run()

    return result

def main():

    usage="""
Usage:
  vpoller-client [-r <retries>] [-t <timeout>] [-o <logfile>] [-H <helper>] [-p <properties>] -m <method> -V <host> -e <endpoint> 
  vpoller-client [-r <retries>] [-t <timeout>] [-o <logfile>] [-H <helper>] -m <method> -n <name> -p <properties> -V <host> -e <endpoint>
  vpoller-client [-r <retries>] [-t <timeout>] [-o <logfile>] [-H <helper>] -m <method> -n <name> -c <counters> -V <host> -e <endpoint>
  vpoller-client --help
  vpoller-client --version

Options:
  -h, --help                                  Display this usage info
  -v, --version                               Display version and exit
  -m <method>, --method <method>              The method to be processed during the client request
  -V <host>, --vsphere-host <host>            The vSphere host to send the request to
  -n <name>, --name <name>                    Name of the object, e.g. ESXi hostname, datastore URL, etc.
  -p <properties>, --properties <properties>  Name of the property as defined by the vSphere Web SDK
  -c <counters>, --counters <counters>        Name of the property as defined by the vSphere Web SDK  
  -r <retries>, --retries <retries>           Number of time to retry if a request times out [default: 3]
  -t <timeout>, --timeout <timeout>           Timeout after that period of milliseconds [default: 3000]
  -e <endpoint>, --endpoint <endpoint>        Endpoint of ZeroMQ Proxy/Broker the client connects to
                                              [default: tcp://localhost:10123]
  -o <logfile>, --output <logfile>            Specify the log file to use when performing the poll
                                              [default: /var/log/vpoller/vpoller-client.log]
  -H <helper>, --helper <helper>              Specify a helper module to use for processing the
                                              result message, e.g. 'zabbix'

"""

    args = docopt(usage, version="0.1.0")

    if args["--output"] == "-":
        logging.basicConfig(stream=sys.stdout,
                            format='%(asctime)s - %(levelname)s - vpoller-client[%(process)s]: %(message)s',
                            level=logging.DEBUG)
    else:
        logging.basicConfig(filename=args["--output"],
                            format='%(asctime)s - %(levelname)s - vpoller-client[%(process)s]: %(message)s',
                            level=logging.DEBUG)
        
    client = VPollerClient(endpoint=args["--endpoint"], retries=int(args["--retries"]), timeout=int(args["--timeout"]))

    # List of available helpers
    helpers = ['vpoller.helpers.zabbix', 'vpoller.helpers.csvhelper']

    # Message we send out to workers
    msg = {
        'method':     args['--method'],
        'hostname':   args['--vsphere-host'],
        'name':       args['--name'],
        'properties': args['--properties'].split(',') if args['--properties'] else None,
        'counters': args['--counters'].split(',') if args['--counters'] else None,
        }

    # Get the result
    data = client.run(msg)

    # Do we use a helper module?
    if args['--helper'] and args['--helper'] in helpers:
        result = vpoller_helpers(args['--helper'], msg, data)
    else:
        result = json.dumps(json.loads(data), indent=4)
    
    print result

if __name__ == '__main__':
    main()

